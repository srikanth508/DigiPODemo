import { Component, OnInit } from '@angular/core';
import Swal from 'sweetalert2';
import { PomsService } from '../../../poms.service';
import { NgDateRangePickerOptions } from 'ng-daterangepicker';
import { formatDate } from "@angular/common";
@Component({
  selector: 'app-tenderdashboard',
  templateUrl: './tenderdashboard.component.html',
  styleUrls: ['./tenderdashboard.component.css']
})
export class TenderdashboardComponent implements OnInit {
  options: NgDateRangePickerOptions;
  constructor(public pomservice: PomsService) { }
  SDate = new Date();
  EDate = new Date();
  value: any;
  public startdate: any;
  public enddate: any;
  public todaydate: any;
  public tenderslist: any;
  public genaratorid:any;
  ngOnInit() {
    this.genaratorid = localStorage.getItem('genaratorid');
    this.options = {
      theme: 'default',
      range: 'tm',
      dayNames: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'],
      presetNames: ['This Month', 'Last Month', 'This Week', 'Last Week', 'This Year', 'Last Year', 'Start', 'End'],
      dateFormat: 'yyyy/MM/dd',
      outputFormat: 'YYYY/MM/DD',
      startOfWeek: 1
    };

    let date = new Date();
    let hours = date.getHours();
    let minutes = date.getMinutes();
    let newformat = hours >= 12 ? 'PM' : 'AM';
    // Find current hour in AM-PM Format 
    hours = hours % 12;
    // To display "0" as "12" 
    hours = hours ? hours : 12;
    minutes = minutes < 10 ? 0 + minutes : minutes;

    var kkk = this.SDate.setDate(this.SDate.getDate() - 10);
    var lll = this.EDate.setDate(this.EDate.getDate() + 10);

    const format = 'yyyy-MM-dd';
    const myDate = new Date();
    const locale = 'en-US';
    this.todaydate = formatDate(myDate, format, locale);
    this.startdate = formatDate(kkk, format, locale);
    this.enddate = formatDate(lll, format, locale);
    this.GettenderList()
  }


  public GettenderList() {
    this.pomservice.GetTenderBySdateAndEdate(this.startdate, this.enddate,this.genaratorid).subscribe(data => {
      this.tenderslist = data;
    }, error => {

    })
  }

  selectedDate(data) {
    debugger
    var sdate = data.split('-')
    this.startdate = sdate[0]
    this.enddate = sdate[1]
    this.GettenderList()
  }

  public DeleteTender(id) {
    debugger;
    Swal.fire({
      title: "Are you sure?",
      text: "You will not be able to recover this  Tender!",
      icon: "warning",
      showCancelButton: true,
      confirmButtonText: "Yes, delete it!",
      cancelButtonText: "No, keep it"
    }).then(result => {
      if (result.value) {
        this.pomservice.DeleteTender(id).subscribe(data => {
          debugger;
          if (data != null || data != undefined) {
            Swal.fire("Deleted!", "Deleted Successfully", "success");
            this.GettenderList();
          }
        });
      } else if (result.dismiss === Swal.DismissReason.cancel) {
        Swal.fire("Cancelled", "Your Tender is safe :)", "error");
      }
    });
  }


  public GetTenderViewID(id)
  {
  localStorage.setItem('TenderID',id);
  localStorage.setItem('StartDate',this.startdate)
  localStorage.setItem('EndDate',this.enddate)
  }
}
