import { Component, OnInit } from '@angular/core';
import Swal from 'sweetalert2';
import { PomsService } from '../../poms.service';
import { ActivatedRoute } from '@angular/router';
import * as XLSX from 'xlsx';
const EXCEL_TYPE = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8';
const EXCEL_EXTENSION = '.xlsx';
import * as FileSaver from 'file-saver';
@Component({
  selector: 'app-admin-dash-reports',
  templateUrl: './admin-dash-reports.component.html',
  styleUrls: ['./admin-dash-reports.component.css']
})
export class AdminDashReportsComponent implements OnInit {
  public status: any;
  public poid: any;
  public genaratorid: any;
  public statuslist: any;
  public itemid: any;
  public startdate: any;
  public enddate: any;
  public itemslist: any;
  public count: any;
  public grandtotal: any;

  constructor(public pomservice: PomsService, private activatedroute: ActivatedRoute) { }

  ngOnInit() {
    
    this.startdate = localStorage.getItem("startdate");
    this.enddate = localStorage.getItem("enddate");
    this.status = localStorage.getItem('Statusss');
    this.GetStatusByGenaratorID();
  }
  public GetStatusByGenaratorID() {
    
    this.pomservice.GetPurchaseOrderReportsStatusAdmin(this.status, this.startdate, this.enddate).subscribe(data => {
      this.statuslist = data;
      this.count = this.statuslist.length;

      this.grandtotal = 0;
      for (let i = 0; i < this.statuslist.length; i++) {
        this.grandtotal = Number(this.grandtotal) + Number(this.statuslist[i].total)
      }
    }, error => {

    })
  }
  public GetOrderID(id) {
    this.itemid = id;
    this.getpurchaseorderitems()
  }

  public getpurchaseorderitems() {
    this.pomservice.GetPurchaseOrderDetailsByPurchaseOrderID(this.itemid).subscribe(data => {
      this.itemslist = data;
    }, error => {

    })
  }



  public getglmasterexcel() {
    let hhh = this.tableToJson(document.getElementById('POREPORTS'));
    this.exportAsExcelFile(hhh, "PO Reports");
  }

  public tableToJson(table) {
    
    var data = []; // first row needs to be headers
    var headers = [];
    for (var i = 1; i < table.rows[0].cells.length; i++) {
      headers[i] = table.rows[0].cells[i].innerHTML.toUpperCase().replace(/ /gi, '');
    }
    // go through cells 
    for (var i = 1; i < table.rows.length; i++) {
      var tableRow = table.rows[i];
      var rowData = {};
      for (var j = 1; j < tableRow.cells.length - 1; j++) {
        rowData[headers[j]] = tableRow.cells[j].innerHTML;
      } data.push(rowData);
    }
    return data;
  }

  public exportAsExcelFile(json: any[], excelFileName: string): void {
    
    const worksheet: XLSX.WorkSheet = XLSX.utils.json_to_sheet(json);
    const workbook: XLSX.WorkBook = { Sheets: { 'data': worksheet }, SheetNames: ['data'] };
    const excelBuffer: any = XLSX.write(workbook, { bookType: 'xlsx', type: 'array' });
    this.saveAsExcelFile(excelBuffer, excelFileName);
  }

  private saveAsExcelFile(buffer: any, fileName: string): void {
    const data: Blob = new Blob([buffer], { type: EXCEL_TYPE });
    FileSaver.saveAs(data, fileName + '_export_' + new Date().getTime() + EXCEL_EXTENSION);
  }
}
