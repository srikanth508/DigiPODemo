{"version":3,"sources":["node_modules/dompurify/dist/purify.js"],"names":[],"mappings":"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","sourcesContent":["/*! @license DOMPurify | (c) Cure53 and other contributors | Released under the Apache license 2.0 and Mozilla Public License 2.0 | github.com/cure53/DOMPurify/blob/2.2.2/LICENSE */\r\n\r\n(function (global, factory) {\r\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\r\n  typeof define === 'function' && define.amd ? define(factory) :\r\n  (global = global || self, global.DOMPurify = factory());\r\n}(this, function () { 'use strict';\r\n\r\n  function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\r\n\r\n  var hasOwnProperty = Object.hasOwnProperty,\r\n      setPrototypeOf = Object.setPrototypeOf,\r\n      isFrozen = Object.isFrozen,\r\n      getPrototypeOf = Object.getPrototypeOf,\r\n      getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;\r\n  var freeze = Object.freeze,\r\n      seal = Object.seal,\r\n      create = Object.create; // eslint-disable-line import/no-mutable-exports\r\n\r\n  var _ref = typeof Reflect !== 'undefined' && Reflect,\r\n      apply = _ref.apply,\r\n      construct = _ref.construct;\r\n\r\n  if (!apply) {\r\n    apply = function apply(fun, thisValue, args) {\r\n      return fun.apply(thisValue, args);\r\n    };\r\n  }\r\n\r\n  if (!freeze) {\r\n    freeze = function freeze(x) {\r\n      return x;\r\n    };\r\n  }\r\n\r\n  if (!seal) {\r\n    seal = function seal(x) {\r\n      return x;\r\n    };\r\n  }\r\n\r\n  if (!construct) {\r\n    construct = function construct(Func, args) {\r\n      return new (Function.prototype.bind.apply(Func, [null].concat(_toConsumableArray(args))))();\r\n    };\r\n  }\r\n\r\n  var arrayForEach = unapply(Array.prototype.forEach);\r\n  var arrayPop = unapply(Array.prototype.pop);\r\n  var arrayPush = unapply(Array.prototype.push);\r\n\r\n  var stringToLowerCase = unapply(String.prototype.toLowerCase);\r\n  var stringMatch = unapply(String.prototype.match);\r\n  var stringReplace = unapply(String.prototype.replace);\r\n  var stringIndexOf = unapply(String.prototype.indexOf);\r\n  var stringTrim = unapply(String.prototype.trim);\r\n\r\n  var regExpTest = unapply(RegExp.prototype.test);\r\n\r\n  var typeErrorCreate = unconstruct(TypeError);\r\n\r\n  function unapply(func) {\r\n    return function (thisArg) {\r\n      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\r\n        args[_key - 1] = arguments[_key];\r\n      }\r\n\r\n      return apply(func, thisArg, args);\r\n    };\r\n  }\r\n\r\n  function unconstruct(func) {\r\n    return function () {\r\n      for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\r\n        args[_key2] = arguments[_key2];\r\n      }\r\n\r\n      return construct(func, args);\r\n    };\r\n  }\r\n\r\n  /* Add properties to a lookup table */\r\n  function addToSet(set, array) {\r\n    if (setPrototypeOf) {\r\n      // Make 'in' and truthy checks like Boolean(set.constructor)\r\n      // independent of any properties defined on Object.prototype.\r\n      // Prevent prototype setters from intercepting set as a this value.\r\n      setPrototypeOf(set, null);\r\n    }\r\n\r\n    var l = array.length;\r\n    while (l--) {\r\n      var element = array[l];\r\n      if (typeof element === 'string') {\r\n        var lcElement = stringToLowerCase(element);\r\n        if (lcElement !== element) {\r\n          // Config presets (e.g. tags.js, attrs.js) are immutable.\r\n          if (!isFrozen(array)) {\r\n            array[l] = lcElement;\r\n          }\r\n\r\n          element = lcElement;\r\n        }\r\n      }\r\n\r\n      set[element] = true;\r\n    }\r\n\r\n    return set;\r\n  }\r\n\r\n  /* Shallow clone an object */\r\n  function clone(object) {\r\n    var newObject = create(null);\r\n\r\n    var property = void 0;\r\n    for (property in object) {\r\n      if (apply(hasOwnProperty, object, [property])) {\r\n        newObject[property] = object[property];\r\n      }\r\n    }\r\n\r\n    return newObject;\r\n  }\r\n\r\n  /* IE10 doesn't support __lookupGetter__ so lets'\r\n   * simulate it. It also automatically checks\r\n   * if the prop is function or getter and behaves\r\n   * accordingly. */\r\n  function lookupGetter(object, prop) {\r\n    while (object !== null) {\r\n      var desc = getOwnPropertyDescriptor(object, prop);\r\n      if (desc) {\r\n        if (desc.get) {\r\n          return unapply(desc.get);\r\n        }\r\n\r\n        if (typeof desc.value === 'function') {\r\n          return unapply(desc.value);\r\n        }\r\n      }\r\n\r\n      object = getPrototypeOf(object);\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  var html = freeze(['a', 'abbr', 'acronym', 'address', 'area', 'article', 'aside', 'audio', 'b', 'bdi', 'bdo', 'big', 'blink', 'blockquote', 'body', 'br', 'button', 'canvas', 'caption', 'center', 'cite', 'code', 'col', 'colgroup', 'content', 'data', 'datalist', 'dd', 'decorator', 'del', 'details', 'dfn', 'dialog', 'dir', 'div', 'dl', 'dt', 'element', 'em', 'fieldset', 'figcaption', 'figure', 'font', 'footer', 'form', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'i', 'img', 'input', 'ins', 'kbd', 'label', 'legend', 'li', 'main', 'map', 'mark', 'marquee', 'menu', 'menuitem', 'meter', 'nav', 'nobr', 'ol', 'optgroup', 'option', 'output', 'p', 'picture', 'pre', 'progress', 'q', 'rp', 'rt', 'ruby', 's', 'samp', 'section', 'select', 'shadow', 'small', 'source', 'spacer', 'span', 'strike', 'strong', 'style', 'sub', 'summary', 'sup', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'time', 'tr', 'track', 'tt', 'u', 'ul', 'var', 'video', 'wbr']);\r\n\r\n  // SVG\r\n  var svg = freeze(['svg', 'a', 'altglyph', 'altglyphdef', 'altglyphitem', 'animatecolor', 'animatemotion', 'animatetransform', 'circle', 'clippath', 'defs', 'desc', 'ellipse', 'filter', 'font', 'g', 'glyph', 'glyphref', 'hkern', 'image', 'line', 'lineargradient', 'marker', 'mask', 'metadata', 'mpath', 'path', 'pattern', 'polygon', 'polyline', 'radialgradient', 'rect', 'stop', 'style', 'switch', 'symbol', 'text', 'textpath', 'title', 'tref', 'tspan', 'view', 'vkern']);\r\n\r\n  var svgFilters = freeze(['feBlend', 'feColorMatrix', 'feComponentTransfer', 'feComposite', 'feConvolveMatrix', 'feDiffuseLighting', 'feDisplacementMap', 'feDistantLight', 'feFlood', 'feFuncA', 'feFuncB', 'feFuncG', 'feFuncR', 'feGaussianBlur', 'feMerge', 'feMergeNode', 'feMorphology', 'feOffset', 'fePointLight', 'feSpecularLighting', 'feSpotLight', 'feTile', 'feTurbulence']);\r\n\r\n  // List of SVG elements that are disallowed by default.\r\n  // We still need to know them so that we can do namespace\r\n  // checks properly in case one wants to add them to\r\n  // allow-list.\r\n  var svgDisallowed = freeze(['animate', 'color-profile', 'cursor', 'discard', 'fedropshadow', 'feimage', 'font-face', 'font-face-format', 'font-face-name', 'font-face-src', 'font-face-uri', 'foreignobject', 'hatch', 'hatchpath', 'mesh', 'meshgradient', 'meshpatch', 'meshrow', 'missing-glyph', 'script', 'set', 'solidcolor', 'unknown', 'use']);\r\n\r\n  var mathMl = freeze(['math', 'menclose', 'merror', 'mfenced', 'mfrac', 'mglyph', 'mi', 'mlabeledtr', 'mmultiscripts', 'mn', 'mo', 'mover', 'mpadded', 'mphantom', 'mroot', 'mrow', 'ms', 'mspace', 'msqrt', 'mstyle', 'msub', 'msup', 'msubsup', 'mtable', 'mtd', 'mtext', 'mtr', 'munder', 'munderover']);\r\n\r\n  // Similarly to SVG, we want to know all MathML elements,\r\n  // even those that we disallow by default.\r\n  var mathMlDisallowed = freeze(['maction', 'maligngroup', 'malignmark', 'mlongdiv', 'mscarries', 'mscarry', 'msgroup', 'mstack', 'msline', 'msrow', 'semantics', 'annotation', 'annotation-xml', 'mprescripts', 'none']);\r\n\r\n  var text = freeze(['#text']);\r\n\r\n  var html$1 = freeze(['accept', 'action', 'align', 'alt', 'autocapitalize', 'autocomplete', 'autopictureinpicture', 'autoplay', 'background', 'bgcolor', 'border', 'capture', 'cellpadding', 'cellspacing', 'checked', 'cite', 'class', 'clear', 'color', 'cols', 'colspan', 'controls', 'controlslist', 'coords', 'crossorigin', 'datetime', 'decoding', 'default', 'dir', 'disabled', 'disablepictureinpicture', 'disableremoteplayback', 'download', 'draggable', 'enctype', 'enterkeyhint', 'face', 'for', 'headers', 'height', 'hidden', 'high', 'href', 'hreflang', 'id', 'inputmode', 'integrity', 'ismap', 'kind', 'label', 'lang', 'list', 'loading', 'loop', 'low', 'max', 'maxlength', 'media', 'method', 'min', 'minlength', 'multiple', 'muted', 'name', 'noshade', 'novalidate', 'nowrap', 'open', 'optimum', 'pattern', 'placeholder', 'playsinline', 'poster', 'preload', 'pubdate', 'radiogroup', 'readonly', 'rel', 'required', 'rev', 'reversed', 'role', 'rows', 'rowspan', 'spellcheck', 'scope', 'selected', 'shape', 'size', 'sizes', 'span', 'srclang', 'start', 'src', 'srcset', 'step', 'style', 'summary', 'tabindex', 'title', 'translate', 'type', 'usemap', 'valign', 'value', 'width', 'xmlns']);\r\n\r\n  var svg$1 = freeze(['accent-height', 'accumulate', 'additive', 'alignment-baseline', 'ascent', 'attributename', 'attributetype', 'azimuth', 'basefrequency', 'baseline-shift', 'begin', 'bias', 'by', 'class', 'clip', 'clippathunits', 'clip-path', 'clip-rule', 'color', 'color-interpolation', 'color-interpolation-filters', 'color-profile', 'color-rendering', 'cx', 'cy', 'd', 'dx', 'dy', 'diffuseconstant', 'direction', 'display', 'divisor', 'dur', 'edgemode', 'elevation', 'end', 'fill', 'fill-opacity', 'fill-rule', 'filter', 'filterunits', 'flood-color', 'flood-opacity', 'font-family', 'font-size', 'font-size-adjust', 'font-stretch', 'font-style', 'font-variant', 'font-weight', 'fx', 'fy', 'g1', 'g2', 'glyph-name', 'glyphref', 'gradientunits', 'gradienttransform', 'height', 'href', 'id', 'image-rendering', 'in', 'in2', 'k', 'k1', 'k2', 'k3', 'k4', 'kerning', 'keypoints', 'keysplines', 'keytimes', 'lang', 'lengthadjust', 'letter-spacing', 'kernelmatrix', 'kernelunitlength', 'lighting-color', 'local', 'marker-end', 'marker-mid', 'marker-start', 'markerheight', 'markerunits', 'markerwidth', 'maskcontentunits', 'maskunits', 'max', 'mask', 'media', 'method', 'mode', 'min', 'name', 'numoctaves', 'offset', 'operator', 'opacity', 'order', 'orient', 'orientation', 'origin', 'overflow', 'paint-order', 'path', 'pathlength', 'patterncontentunits', 'patterntransform', 'patternunits', 'points', 'preservealpha', 'preserveaspectratio', 'primitiveunits', 'r', 'rx', 'ry', 'radius', 'refx', 'refy', 'repeatcount', 'repeatdur', 'restart', 'result', 'rotate', 'scale', 'seed', 'shape-rendering', 'specularconstant', 'specularexponent', 'spreadmethod', 'startoffset', 'stddeviation', 'stitchtiles', 'stop-color', 'stop-opacity', 'stroke-dasharray', 'stroke-dashoffset', 'stroke-linecap', 'stroke-linejoin', 'stroke-miterlimit', 'stroke-opacity', 'stroke', 'stroke-width', 'style', 'surfacescale', 'systemlanguage', 'tabindex', 'targetx', 'targety', 'transform', 'text-anchor', 'text-decoration', 'text-rendering', 'textlength', 'type', 'u1', 'u2', 'unicode', 'values', 'viewbox', 'visibility', 'version', 'vert-adv-y', 'vert-origin-x', 'vert-origin-y', 'width', 'word-spacing', 'wrap', 'writing-mode', 'xchannelselector', 'ychannelselector', 'x', 'x1', 'x2', 'xmlns', 'y', 'y1', 'y2', 'z', 'zoomandpan']);\r\n\r\n  var mathMl$1 = freeze(['accent', 'accentunder', 'align', 'bevelled', 'close', 'columnsalign', 'columnlines', 'columnspan', 'denomalign', 'depth', 'dir', 'display', 'displaystyle', 'encoding', 'fence', 'frame', 'height', 'href', 'id', 'largeop', 'length', 'linethickness', 'lspace', 'lquote', 'mathbackground', 'mathcolor', 'mathsize', 'mathvariant', 'maxsize', 'minsize', 'movablelimits', 'notation', 'numalign', 'open', 'rowalign', 'rowlines', 'rowspacing', 'rowspan', 'rspace', 'rquote', 'scriptlevel', 'scriptminsize', 'scriptsizemultiplier', 'selection', 'separator', 'separators', 'stretchy', 'subscriptshift', 'supscriptshift', 'symmetric', 'voffset', 'width', 'xmlns']);\r\n\r\n  var xml = freeze(['xlink:href', 'xml:id', 'xlink:title', 'xml:space', 'xmlns:xlink']);\r\n\r\n  // eslint-disable-next-line unicorn/better-regex\r\n  var MUSTACHE_EXPR = seal(/\\{\\{[\\s\\S]*|[\\s\\S]*\\}\\}/gm); // Specify template detection regex for SAFE_FOR_TEMPLATES mode\r\n  var ERB_EXPR = seal(/<%[\\s\\S]*|[\\s\\S]*%>/gm);\r\n  var DATA_ATTR = seal(/^data-[\\-\\w.\\u00B7-\\uFFFF]/); // eslint-disable-line no-useless-escape\r\n  var ARIA_ATTR = seal(/^aria-[\\-\\w]+$/); // eslint-disable-line no-useless-escape\r\n  var IS_ALLOWED_URI = seal(/^(?:(?:(?:f|ht)tps?|mailto|tel|callto|cid|xmpp):|[^a-z]|[a-z+.\\-]+(?:[^a-z+.\\-:]|$))/i // eslint-disable-line no-useless-escape\r\n  );\r\n  var IS_SCRIPT_OR_DATA = seal(/^(?:\\w+script|data):/i);\r\n  var ATTR_WHITESPACE = seal(/[\\u0000-\\u0020\\u00A0\\u1680\\u180E\\u2000-\\u2029\\u205F\\u3000]/g // eslint-disable-line no-control-regex\r\n  );\r\n\r\n  var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\r\n\r\n  function _toConsumableArray$1(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\r\n\r\n  var getGlobal = function getGlobal() {\r\n    return typeof window === 'undefined' ? null : window;\r\n  };\r\n\r\n  /**\r\n   * Creates a no-op policy for internal use only.\r\n   * Don't export this function outside this module!\r\n   * @param {?TrustedTypePolicyFactory} trustedTypes The policy factory.\r\n   * @param {Document} document The document object (to determine policy name suffix)\r\n   * @return {?TrustedTypePolicy} The policy created (or null, if Trusted Types\r\n   * are not supported).\r\n   */\r\n  var _createTrustedTypesPolicy = function _createTrustedTypesPolicy(trustedTypes, document) {\r\n    if ((typeof trustedTypes === 'undefined' ? 'undefined' : _typeof(trustedTypes)) !== 'object' || typeof trustedTypes.createPolicy !== 'function') {\r\n      return null;\r\n    }\r\n\r\n    // Allow the callers to control the unique policy name\r\n    // by adding a data-tt-policy-suffix to the script element with the DOMPurify.\r\n    // Policy creation with duplicate names throws in Trusted Types.\r\n    var suffix = null;\r\n    var ATTR_NAME = 'data-tt-policy-suffix';\r\n    if (document.currentScript && document.currentScript.hasAttribute(ATTR_NAME)) {\r\n      suffix = document.currentScript.getAttribute(ATTR_NAME);\r\n    }\r\n\r\n    var policyName = 'dompurify' + (suffix ? '#' + suffix : '');\r\n\r\n    try {\r\n      return trustedTypes.createPolicy(policyName, {\r\n        createHTML: function createHTML(html$$1) {\r\n          return html$$1;\r\n        }\r\n      });\r\n    } catch (_) {\r\n      // Policy creation failed (most likely another DOMPurify script has\r\n      // already run). Skip creating the policy, as this will only cause errors\r\n      // if TT are enforced.\r\n      console.warn('TrustedTypes policy ' + policyName + ' could not be created.');\r\n      return null;\r\n    }\r\n  };\r\n\r\n  function createDOMPurify() {\r\n    var window = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getGlobal();\r\n\r\n    var DOMPurify = function DOMPurify(root) {\r\n      return createDOMPurify(root);\r\n    };\r\n\r\n    /**\r\n     * Version label, exposed for easier checks\r\n     * if DOMPurify is up to date or not\r\n     */\r\n    DOMPurify.version = '2.2.6';\r\n\r\n    /**\r\n     * Array of elements that DOMPurify removed during sanitation.\r\n     * Empty if nothing was removed.\r\n     */\r\n    DOMPurify.removed = [];\r\n\r\n    if (!window || !window.document || window.document.nodeType !== 9) {\r\n      // Not running in a browser, provide a factory function\r\n      // so that you can pass your own Window\r\n      DOMPurify.isSupported = false;\r\n\r\n      return DOMPurify;\r\n    }\r\n\r\n    var originalDocument = window.document;\r\n\r\n    var document = window.document;\r\n    var DocumentFragment = window.DocumentFragment,\r\n        HTMLTemplateElement = window.HTMLTemplateElement,\r\n        Node = window.Node,\r\n        Element = window.Element,\r\n        NodeFilter = window.NodeFilter,\r\n        _window$NamedNodeMap = window.NamedNodeMap,\r\n        NamedNodeMap = _window$NamedNodeMap === undefined ? window.NamedNodeMap || window.MozNamedAttrMap : _window$NamedNodeMap,\r\n        Text = window.Text,\r\n        Comment = window.Comment,\r\n        DOMParser = window.DOMParser,\r\n        trustedTypes = window.trustedTypes;\r\n\r\n\r\n    var ElementPrototype = Element.prototype;\r\n\r\n    var cloneNode = lookupGetter(ElementPrototype, 'cloneNode');\r\n    var getNextSibling = lookupGetter(ElementPrototype, 'nextSibling');\r\n    var getChildNodes = lookupGetter(ElementPrototype, 'childNodes');\r\n    var getParentNode = lookupGetter(ElementPrototype, 'parentNode');\r\n\r\n    // As per issue #47, the web-components registry is inherited by a\r\n    // new document created via createHTMLDocument. As per the spec\r\n    // (http://w3c.github.io/webcomponents/spec/custom/#creating-and-passing-registries)\r\n    // a new empty registry is used when creating a template contents owner\r\n    // document, so we use that as our parent document to ensure nothing\r\n    // is inherited.\r\n    if (typeof HTMLTemplateElement === 'function') {\r\n      var template = document.createElement('template');\r\n      if (template.content && template.content.ownerDocument) {\r\n        document = template.content.ownerDocument;\r\n      }\r\n    }\r\n\r\n    var trustedTypesPolicy = _createTrustedTypesPolicy(trustedTypes, originalDocument);\r\n    var emptyHTML = trustedTypesPolicy && RETURN_TRUSTED_TYPE ? trustedTypesPolicy.createHTML('') : '';\r\n\r\n    var _document = document,\r\n        implementation = _document.implementation,\r\n        createNodeIterator = _document.createNodeIterator,\r\n        getElementsByTagName = _document.getElementsByTagName,\r\n        createDocumentFragment = _document.createDocumentFragment;\r\n    var importNode = originalDocument.importNode;\r\n\r\n\r\n    var documentMode = {};\r\n    try {\r\n      documentMode = clone(document).documentMode ? document.documentMode : {};\r\n    } catch (_) {}\r\n\r\n    var hooks = {};\r\n\r\n    /**\r\n     * Expose whether this browser supports running the full DOMPurify.\r\n     */\r\n    DOMPurify.isSupported = implementation && typeof implementation.createHTMLDocument !== 'undefined' && documentMode !== 9;\r\n\r\n    var MUSTACHE_EXPR$$1 = MUSTACHE_EXPR,\r\n        ERB_EXPR$$1 = ERB_EXPR,\r\n        DATA_ATTR$$1 = DATA_ATTR,\r\n        ARIA_ATTR$$1 = ARIA_ATTR,\r\n        IS_SCRIPT_OR_DATA$$1 = IS_SCRIPT_OR_DATA,\r\n        ATTR_WHITESPACE$$1 = ATTR_WHITESPACE;\r\n    var IS_ALLOWED_URI$$1 = IS_ALLOWED_URI;\r\n\r\n    /**\r\n     * We consider the elements and attributes below to be safe. Ideally\r\n     * don't add any new ones but feel free to remove unwanted ones.\r\n     */\r\n\r\n    /* allowed element names */\r\n\r\n    var ALLOWED_TAGS = null;\r\n    var DEFAULT_ALLOWED_TAGS = addToSet({}, [].concat(_toConsumableArray$1(html), _toConsumableArray$1(svg), _toConsumableArray$1(svgFilters), _toConsumableArray$1(mathMl), _toConsumableArray$1(text)));\r\n\r\n    /* Allowed attribute names */\r\n    var ALLOWED_ATTR = null;\r\n    var DEFAULT_ALLOWED_ATTR = addToSet({}, [].concat(_toConsumableArray$1(html$1), _toConsumableArray$1(svg$1), _toConsumableArray$1(mathMl$1), _toConsumableArray$1(xml)));\r\n\r\n    /* Explicitly forbidden tags (overrides ALLOWED_TAGS/ADD_TAGS) */\r\n    var FORBID_TAGS = null;\r\n\r\n    /* Explicitly forbidden attributes (overrides ALLOWED_ATTR/ADD_ATTR) */\r\n    var FORBID_ATTR = null;\r\n\r\n    /* Decide if ARIA attributes are okay */\r\n    var ALLOW_ARIA_ATTR = true;\r\n\r\n    /* Decide if custom data attributes are okay */\r\n    var ALLOW_DATA_ATTR = true;\r\n\r\n    /* Decide if unknown protocols are okay */\r\n    var ALLOW_UNKNOWN_PROTOCOLS = false;\r\n\r\n    /* Output should be safe for common template engines.\r\n     * This means, DOMPurify removes data attributes, mustaches and ERB\r\n     */\r\n    var SAFE_FOR_TEMPLATES = false;\r\n\r\n    /* Decide if document with <html>... should be returned */\r\n    var WHOLE_DOCUMENT = false;\r\n\r\n    /* Track whether config is already set on this instance of DOMPurify. */\r\n    var SET_CONFIG = false;\r\n\r\n    /* Decide if all elements (e.g. style, script) must be children of\r\n     * document.body. By default, browsers might move them to document.head */\r\n    var FORCE_BODY = false;\r\n\r\n    /* Decide if a DOM `HTMLBodyElement` should be returned, instead of a html\r\n     * string (or a TrustedHTML object if Trusted Types are supported).\r\n     * If `WHOLE_DOCUMENT` is enabled a `HTMLHtmlElement` will be returned instead\r\n     */\r\n    var RETURN_DOM = false;\r\n\r\n    /* Decide if a DOM `DocumentFragment` should be returned, instead of a html\r\n     * string  (or a TrustedHTML object if Trusted Types are supported) */\r\n    var RETURN_DOM_FRAGMENT = false;\r\n\r\n    /* If `RETURN_DOM` or `RETURN_DOM_FRAGMENT` is enabled, decide if the returned DOM\r\n     * `Node` is imported into the current `Document`. If this flag is not enabled the\r\n     * `Node` will belong (its ownerDocument) to a fresh `HTMLDocument`, created by\r\n     * DOMPurify.\r\n     *\r\n     * This defaults to `true` starting DOMPurify 2.2.0. Note that setting it to `false`\r\n     * might cause XSS from attacks hidden in closed shadowroots in case the browser\r\n     * supports Declarative Shadow: DOM https://web.dev/declarative-shadow-dom/\r\n     */\r\n    var RETURN_DOM_IMPORT = true;\r\n\r\n    /* Try to return a Trusted Type object instead of a string, return a string in\r\n     * case Trusted Types are not supported  */\r\n    var RETURN_TRUSTED_TYPE = false;\r\n\r\n    /* Output should be free from DOM clobbering attacks? */\r\n    var SANITIZE_DOM = true;\r\n\r\n    /* Keep element content when removing element? */\r\n    var KEEP_CONTENT = true;\r\n\r\n    /* If a `Node` is passed to sanitize(), then performs sanitization in-place instead\r\n     * of importing it into a new Document and returning a sanitized copy */\r\n    var IN_PLACE = false;\r\n\r\n    /* Allow usage of profiles like html, svg and mathMl */\r\n    var USE_PROFILES = {};\r\n\r\n    /* Tags to ignore content of when KEEP_CONTENT is true */\r\n    var FORBID_CONTENTS = addToSet({}, ['annotation-xml', 'audio', 'colgroup', 'desc', 'foreignobject', 'head', 'iframe', 'math', 'mi', 'mn', 'mo', 'ms', 'mtext', 'noembed', 'noframes', 'noscript', 'plaintext', 'script', 'style', 'svg', 'template', 'thead', 'title', 'video', 'xmp']);\r\n\r\n    /* Tags that are safe for data: URIs */\r\n    var DATA_URI_TAGS = null;\r\n    var DEFAULT_DATA_URI_TAGS = addToSet({}, ['audio', 'video', 'img', 'source', 'image', 'track']);\r\n\r\n    /* Attributes safe for values like \"javascript:\" */\r\n    var URI_SAFE_ATTRIBUTES = null;\r\n    var DEFAULT_URI_SAFE_ATTRIBUTES = addToSet({}, ['alt', 'class', 'for', 'id', 'label', 'name', 'pattern', 'placeholder', 'summary', 'title', 'value', 'style', 'xmlns']);\r\n\r\n    /* Keep a reference to config to pass to hooks */\r\n    var CONFIG = null;\r\n\r\n    /* Ideally, do not touch anything below this line */\r\n    /* ______________________________________________ */\r\n\r\n    var formElement = document.createElement('form');\r\n\r\n    /**\r\n     * _parseConfig\r\n     *\r\n     * @param  {Object} cfg optional config literal\r\n     */\r\n    // eslint-disable-next-line complexity\r\n    var _parseConfig = function _parseConfig(cfg) {\r\n      if (CONFIG && CONFIG === cfg) {\r\n        return;\r\n      }\r\n\r\n      /* Shield configuration object from tampering */\r\n      if (!cfg || (typeof cfg === 'undefined' ? 'undefined' : _typeof(cfg)) !== 'object') {\r\n        cfg = {};\r\n      }\r\n\r\n      /* Shield configuration object from prototype pollution */\r\n      cfg = clone(cfg);\r\n\r\n      /* Set configuration parameters */\r\n      ALLOWED_TAGS = 'ALLOWED_TAGS' in cfg ? addToSet({}, cfg.ALLOWED_TAGS) : DEFAULT_ALLOWED_TAGS;\r\n      ALLOWED_ATTR = 'ALLOWED_ATTR' in cfg ? addToSet({}, cfg.ALLOWED_ATTR) : DEFAULT_ALLOWED_ATTR;\r\n      URI_SAFE_ATTRIBUTES = 'ADD_URI_SAFE_ATTR' in cfg ? addToSet(clone(DEFAULT_URI_SAFE_ATTRIBUTES), cfg.ADD_URI_SAFE_ATTR) : DEFAULT_URI_SAFE_ATTRIBUTES;\r\n      DATA_URI_TAGS = 'ADD_DATA_URI_TAGS' in cfg ? addToSet(clone(DEFAULT_DATA_URI_TAGS), cfg.ADD_DATA_URI_TAGS) : DEFAULT_DATA_URI_TAGS;\r\n      FORBID_TAGS = 'FORBID_TAGS' in cfg ? addToSet({}, cfg.FORBID_TAGS) : {};\r\n      FORBID_ATTR = 'FORBID_ATTR' in cfg ? addToSet({}, cfg.FORBID_ATTR) : {};\r\n      USE_PROFILES = 'USE_PROFILES' in cfg ? cfg.USE_PROFILES : false;\r\n      ALLOW_ARIA_ATTR = cfg.ALLOW_ARIA_ATTR !== false; // Default true\r\n      ALLOW_DATA_ATTR = cfg.ALLOW_DATA_ATTR !== false; // Default true\r\n      ALLOW_UNKNOWN_PROTOCOLS = cfg.ALLOW_UNKNOWN_PROTOCOLS || false; // Default false\r\n      SAFE_FOR_TEMPLATES = cfg.SAFE_FOR_TEMPLATES || false; // Default false\r\n      WHOLE_DOCUMENT = cfg.WHOLE_DOCUMENT || false; // Default false\r\n      RETURN_DOM = cfg.RETURN_DOM || false; // Default false\r\n      RETURN_DOM_FRAGMENT = cfg.RETURN_DOM_FRAGMENT || false; // Default false\r\n      RETURN_DOM_IMPORT = cfg.RETURN_DOM_IMPORT !== false; // Default true\r\n      RETURN_TRUSTED_TYPE = cfg.RETURN_TRUSTED_TYPE || false; // Default false\r\n      FORCE_BODY = cfg.FORCE_BODY || false; // Default false\r\n      SANITIZE_DOM = cfg.SANITIZE_DOM !== false; // Default true\r\n      KEEP_CONTENT = cfg.KEEP_CONTENT !== false; // Default true\r\n      IN_PLACE = cfg.IN_PLACE || false; // Default false\r\n      IS_ALLOWED_URI$$1 = cfg.ALLOWED_URI_REGEXP || IS_ALLOWED_URI$$1;\r\n      if (SAFE_FOR_TEMPLATES) {\r\n        ALLOW_DATA_ATTR = false;\r\n      }\r\n\r\n      if (RETURN_DOM_FRAGMENT) {\r\n        RETURN_DOM = true;\r\n      }\r\n\r\n      /* Parse profile info */\r\n      if (USE_PROFILES) {\r\n        ALLOWED_TAGS = addToSet({}, [].concat(_toConsumableArray$1(text)));\r\n        ALLOWED_ATTR = [];\r\n        if (USE_PROFILES.html === true) {\r\n          addToSet(ALLOWED_TAGS, html);\r\n          addToSet(ALLOWED_ATTR, html$1);\r\n        }\r\n\r\n        if (USE_PROFILES.svg === true) {\r\n          addToSet(ALLOWED_TAGS, svg);\r\n          addToSet(ALLOWED_ATTR, svg$1);\r\n          addToSet(ALLOWED_ATTR, xml);\r\n        }\r\n\r\n        if (USE_PROFILES.svgFilters === true) {\r\n          addToSet(ALLOWED_TAGS, svgFilters);\r\n          addToSet(ALLOWED_ATTR, svg$1);\r\n          addToSet(ALLOWED_ATTR, xml);\r\n        }\r\n\r\n        if (USE_PROFILES.mathMl === true) {\r\n          addToSet(ALLOWED_TAGS, mathMl);\r\n          addToSet(ALLOWED_ATTR, mathMl$1);\r\n          addToSet(ALLOWED_ATTR, xml);\r\n        }\r\n      }\r\n\r\n      /* Merge configuration parameters */\r\n      if (cfg.ADD_TAGS) {\r\n        if (ALLOWED_TAGS === DEFAULT_ALLOWED_TAGS) {\r\n          ALLOWED_TAGS = clone(ALLOWED_TAGS);\r\n        }\r\n\r\n        addToSet(ALLOWED_TAGS, cfg.ADD_TAGS);\r\n      }\r\n\r\n      if (cfg.ADD_ATTR) {\r\n        if (ALLOWED_ATTR === DEFAULT_ALLOWED_ATTR) {\r\n          ALLOWED_ATTR = clone(ALLOWED_ATTR);\r\n        }\r\n\r\n        addToSet(ALLOWED_ATTR, cfg.ADD_ATTR);\r\n      }\r\n\r\n      if (cfg.ADD_URI_SAFE_ATTR) {\r\n        addToSet(URI_SAFE_ATTRIBUTES, cfg.ADD_URI_SAFE_ATTR);\r\n      }\r\n\r\n      /* Add #text in case KEEP_CONTENT is set to true */\r\n      if (KEEP_CONTENT) {\r\n        ALLOWED_TAGS['#text'] = true;\r\n      }\r\n\r\n      /* Add html, head and body to ALLOWED_TAGS in case WHOLE_DOCUMENT is true */\r\n      if (WHOLE_DOCUMENT) {\r\n        addToSet(ALLOWED_TAGS, ['html', 'head', 'body']);\r\n      }\r\n\r\n      /* Add tbody to ALLOWED_TAGS in case tables are permitted, see #286, #365 */\r\n      if (ALLOWED_TAGS.table) {\r\n        addToSet(ALLOWED_TAGS, ['tbody']);\r\n        delete FORBID_TAGS.tbody;\r\n      }\r\n\r\n      // Prevent further manipulation of configuration.\r\n      // Not available in IE8, Safari 5, etc.\r\n      if (freeze) {\r\n        freeze(cfg);\r\n      }\r\n\r\n      CONFIG = cfg;\r\n    };\r\n\r\n    var MATHML_TEXT_INTEGRATION_POINTS = addToSet({}, ['mi', 'mo', 'mn', 'ms', 'mtext']);\r\n\r\n    var HTML_INTEGRATION_POINTS = addToSet({}, ['foreignobject', 'desc', 'title', 'annotation-xml']);\r\n\r\n    /* Keep track of all possible SVG and MathML tags\r\n     * so that we can perform the namespace checks\r\n     * correctly. */\r\n    var ALL_SVG_TAGS = addToSet({}, svg);\r\n    addToSet(ALL_SVG_TAGS, svgFilters);\r\n    addToSet(ALL_SVG_TAGS, svgDisallowed);\r\n\r\n    var ALL_MATHML_TAGS = addToSet({}, mathMl);\r\n    addToSet(ALL_MATHML_TAGS, mathMlDisallowed);\r\n\r\n    var MATHML_NAMESPACE = 'http://www.w3.org/1998/Math/MathML';\r\n    var SVG_NAMESPACE = 'http://www.w3.org/2000/svg';\r\n    var HTML_NAMESPACE = 'http://www.w3.org/1999/xhtml';\r\n\r\n    /**\r\n     *\r\n     *\r\n     * @param  {Element} element a DOM element whose namespace is being checked\r\n     * @returns {boolean} Return false if the element has a\r\n     *  namespace that a spec-compliant parser would never\r\n     *  return. Return true otherwise.\r\n     */\r\n    var _checkValidNamespace = function _checkValidNamespace(element) {\r\n      var parent = getParentNode(element);\r\n\r\n      // In JSDOM, if we're inside shadow DOM, then parentNode\r\n      // can be null. We just simulate parent in this case.\r\n      if (!parent || !parent.tagName) {\r\n        parent = {\r\n          namespaceURI: HTML_NAMESPACE,\r\n          tagName: 'template'\r\n        };\r\n      }\r\n\r\n      var tagName = stringToLowerCase(element.tagName);\r\n      var parentTagName = stringToLowerCase(parent.tagName);\r\n\r\n      if (element.namespaceURI === SVG_NAMESPACE) {\r\n        // The only way to switch from HTML namespace to SVG\r\n        // is via <svg>. If it happens via any other tag, then\r\n        // it should be killed.\r\n        if (parent.namespaceURI === HTML_NAMESPACE) {\r\n          return tagName === 'svg';\r\n        }\r\n\r\n        // The only way to switch from MathML to SVG is via\r\n        // svg if parent is either <annotation-xml> or MathML\r\n        // text integration points.\r\n        if (parent.namespaceURI === MATHML_NAMESPACE) {\r\n          return tagName === 'svg' && (parentTagName === 'annotation-xml' || MATHML_TEXT_INTEGRATION_POINTS[parentTagName]);\r\n        }\r\n\r\n        // We only allow elements that are defined in SVG\r\n        // spec. All others are disallowed in SVG namespace.\r\n        return Boolean(ALL_SVG_TAGS[tagName]);\r\n      }\r\n\r\n      if (element.namespaceURI === MATHML_NAMESPACE) {\r\n        // The only way to switch from HTML namespace to MathML\r\n        // is via <math>. If it happens via any other tag, then\r\n        // it should be killed.\r\n        if (parent.namespaceURI === HTML_NAMESPACE) {\r\n          return tagName === 'math';\r\n        }\r\n\r\n        // The only way to switch from SVG to MathML is via\r\n        // <math> and HTML integration points\r\n        if (parent.namespaceURI === SVG_NAMESPACE) {\r\n          return tagName === 'math' && HTML_INTEGRATION_POINTS[parentTagName];\r\n        }\r\n\r\n        // We only allow elements that are defined in MathML\r\n        // spec. All others are disallowed in MathML namespace.\r\n        return Boolean(ALL_MATHML_TAGS[tagName]);\r\n      }\r\n\r\n      if (element.namespaceURI === HTML_NAMESPACE) {\r\n        // The only way to switch from SVG to HTML is via\r\n        // HTML integration points, and from MathML to HTML\r\n        // is via MathML text integration points\r\n        if (parent.namespaceURI === SVG_NAMESPACE && !HTML_INTEGRATION_POINTS[parentTagName]) {\r\n          return false;\r\n        }\r\n\r\n        if (parent.namespaceURI === MATHML_NAMESPACE && !MATHML_TEXT_INTEGRATION_POINTS[parentTagName]) {\r\n          return false;\r\n        }\r\n\r\n        // Certain elements are allowed in both SVG and HTML\r\n        // namespace. We need to specify them explicitly\r\n        // so that they don't get erronously deleted from\r\n        // HTML namespace.\r\n        var commonSvgAndHTMLElements = addToSet({}, ['title', 'style', 'font', 'a', 'script']);\r\n\r\n        // We disallow tags that are specific for MathML\r\n        // or SVG and should never appear in HTML namespace\r\n        return !ALL_MATHML_TAGS[tagName] && (commonSvgAndHTMLElements[tagName] || !ALL_SVG_TAGS[tagName]);\r\n      }\r\n\r\n      // The code should never reach this place (this means\r\n      // that the element somehow got namespace that is not\r\n      // HTML, SVG or MathML). Return false just in case.\r\n      return false;\r\n    };\r\n\r\n    /**\r\n     * _forceRemove\r\n     *\r\n     * @param  {Node} node a DOM node\r\n     */\r\n    var _forceRemove = function _forceRemove(node) {\r\n      arrayPush(DOMPurify.removed, { element: node });\r\n      try {\r\n        node.parentNode.removeChild(node);\r\n      } catch (_) {\r\n        try {\r\n          node.outerHTML = emptyHTML;\r\n        } catch (_) {\r\n          node.remove();\r\n        }\r\n      }\r\n    };\r\n\r\n    /**\r\n     * _removeAttribute\r\n     *\r\n     * @param  {String} name an Attribute name\r\n     * @param  {Node} node a DOM node\r\n     */\r\n    var _removeAttribute = function _removeAttribute(name, node) {\r\n      try {\r\n        arrayPush(DOMPurify.removed, {\r\n          attribute: node.getAttributeNode(name),\r\n          from: node\r\n        });\r\n      } catch (_) {\r\n        arrayPush(DOMPurify.removed, {\r\n          attribute: null,\r\n          from: node\r\n        });\r\n      }\r\n\r\n      node.removeAttribute(name);\r\n    };\r\n\r\n    /**\r\n     * _initDocument\r\n     *\r\n     * @param  {String} dirty a string of dirty markup\r\n     * @return {Document} a DOM, filled with the dirty markup\r\n     */\r\n    var _initDocument = function _initDocument(dirty) {\r\n      /* Create a HTML document */\r\n      var doc = void 0;\r\n      var leadingWhitespace = void 0;\r\n\r\n      if (FORCE_BODY) {\r\n        dirty = '<remove></remove>' + dirty;\r\n      } else {\r\n        /* If FORCE_BODY isn't used, leading whitespace needs to be preserved manually */\r\n        var matches = stringMatch(dirty, /^[\\r\\n\\t ]+/);\r\n        leadingWhitespace = matches && matches[0];\r\n      }\r\n\r\n      var dirtyPayload = trustedTypesPolicy ? trustedTypesPolicy.createHTML(dirty) : dirty;\r\n      /* Use the DOMParser API by default, fallback later if needs be */\r\n      try {\r\n        doc = new DOMParser().parseFromString(dirtyPayload, 'text/html');\r\n      } catch (_) {}\r\n\r\n      /* Use createHTMLDocument in case DOMParser is not available */\r\n      if (!doc || !doc.documentElement) {\r\n        doc = implementation.createHTMLDocument('');\r\n        var _doc = doc,\r\n            body = _doc.body;\r\n\r\n        body.parentNode.removeChild(body.parentNode.firstElementChild);\r\n        body.outerHTML = dirtyPayload;\r\n      }\r\n\r\n      if (dirty && leadingWhitespace) {\r\n        doc.body.insertBefore(document.createTextNode(leadingWhitespace), doc.body.childNodes[0] || null);\r\n      }\r\n\r\n      /* Work on whole document or just its body */\r\n      return getElementsByTagName.call(doc, WHOLE_DOCUMENT ? 'html' : 'body')[0];\r\n    };\r\n\r\n    /**\r\n     * _createIterator\r\n     *\r\n     * @param  {Document} root document/fragment to create iterator for\r\n     * @return {Iterator} iterator instance\r\n     */\r\n    var _createIterator = function _createIterator(root) {\r\n      return createNodeIterator.call(root.ownerDocument || root, root, NodeFilter.SHOW_ELEMENT | NodeFilter.SHOW_COMMENT | NodeFilter.SHOW_TEXT, function () {\r\n        return NodeFilter.FILTER_ACCEPT;\r\n      }, false);\r\n    };\r\n\r\n    /**\r\n     * _isClobbered\r\n     *\r\n     * @param  {Node} elm element to check for clobbering attacks\r\n     * @return {Boolean} true if clobbered, false if safe\r\n     */\r\n    var _isClobbered = function _isClobbered(elm) {\r\n      if (elm instanceof Text || elm instanceof Comment) {\r\n        return false;\r\n      }\r\n\r\n      if (typeof elm.nodeName !== 'string' || typeof elm.textContent !== 'string' || typeof elm.removeChild !== 'function' || !(elm.attributes instanceof NamedNodeMap) || typeof elm.removeAttribute !== 'function' || typeof elm.setAttribute !== 'function' || typeof elm.namespaceURI !== 'string' || typeof elm.insertBefore !== 'function') {\r\n        return true;\r\n      }\r\n\r\n      return false;\r\n    };\r\n\r\n    /**\r\n     * _isNode\r\n     *\r\n     * @param  {Node} obj object to check whether it's a DOM node\r\n     * @return {Boolean} true is object is a DOM node\r\n     */\r\n    var _isNode = function _isNode(object) {\r\n      return (typeof Node === 'undefined' ? 'undefined' : _typeof(Node)) === 'object' ? object instanceof Node : object && (typeof object === 'undefined' ? 'undefined' : _typeof(object)) === 'object' && typeof object.nodeType === 'number' && typeof object.nodeName === 'string';\r\n    };\r\n\r\n    /**\r\n     * _executeHook\r\n     * Execute user configurable hooks\r\n     *\r\n     * @param  {String} entryPoint  Name of the hook's entry point\r\n     * @param  {Node} currentNode node to work on with the hook\r\n     * @param  {Object} data additional hook parameters\r\n     */\r\n    var _executeHook = function _executeHook(entryPoint, currentNode, data) {\r\n      if (!hooks[entryPoint]) {\r\n        return;\r\n      }\r\n\r\n      arrayForEach(hooks[entryPoint], function (hook) {\r\n        hook.call(DOMPurify, currentNode, data, CONFIG);\r\n      });\r\n    };\r\n\r\n    /**\r\n     * _sanitizeElements\r\n     *\r\n     * @protect nodeName\r\n     * @protect textContent\r\n     * @protect removeChild\r\n     *\r\n     * @param   {Node} currentNode to check for permission to exist\r\n     * @return  {Boolean} true if node was killed, false if left alive\r\n     */\r\n    var _sanitizeElements = function _sanitizeElements(currentNode) {\r\n      var content = void 0;\r\n\r\n      /* Execute a hook if present */\r\n      _executeHook('beforeSanitizeElements', currentNode, null);\r\n\r\n      /* Check if element is clobbered or can clobber */\r\n      if (_isClobbered(currentNode)) {\r\n        _forceRemove(currentNode);\r\n        return true;\r\n      }\r\n\r\n      /* Check if tagname contains Unicode */\r\n      if (stringMatch(currentNode.nodeName, /[\\u0080-\\uFFFF]/)) {\r\n        _forceRemove(currentNode);\r\n        return true;\r\n      }\r\n\r\n      /* Now let's check the element's type and name */\r\n      var tagName = stringToLowerCase(currentNode.nodeName);\r\n\r\n      /* Execute a hook if present */\r\n      _executeHook('uponSanitizeElement', currentNode, {\r\n        tagName: tagName,\r\n        allowedTags: ALLOWED_TAGS\r\n      });\r\n\r\n      /* Detect mXSS attempts abusing namespace confusion */\r\n      if (!_isNode(currentNode.firstElementChild) && (!_isNode(currentNode.content) || !_isNode(currentNode.content.firstElementChild)) && regExpTest(/<[/\\w]/g, currentNode.innerHTML) && regExpTest(/<[/\\w]/g, currentNode.textContent)) {\r\n        _forceRemove(currentNode);\r\n        return true;\r\n      }\r\n\r\n      /* Remove element if anything forbids its presence */\r\n      if (!ALLOWED_TAGS[tagName] || FORBID_TAGS[tagName]) {\r\n        /* Keep content except for bad-listed elements */\r\n        if (KEEP_CONTENT && !FORBID_CONTENTS[tagName]) {\r\n          var parentNode = getParentNode(currentNode);\r\n          var childNodes = getChildNodes(currentNode);\r\n          var childCount = childNodes.length;\r\n          for (var i = childCount - 1; i >= 0; --i) {\r\n            parentNode.insertBefore(cloneNode(childNodes[i], true), getNextSibling(currentNode));\r\n          }\r\n        }\r\n\r\n        _forceRemove(currentNode);\r\n        return true;\r\n      }\r\n\r\n      /* Check whether element has a valid namespace */\r\n      if (currentNode instanceof Element && !_checkValidNamespace(currentNode)) {\r\n        _forceRemove(currentNode);\r\n        return true;\r\n      }\r\n\r\n      if ((tagName === 'noscript' || tagName === 'noembed') && regExpTest(/<\\/no(script|embed)/i, currentNode.innerHTML)) {\r\n        _forceRemove(currentNode);\r\n        return true;\r\n      }\r\n\r\n      /* Sanitize element content to be template-safe */\r\n      if (SAFE_FOR_TEMPLATES && currentNode.nodeType === 3) {\r\n        /* Get the element's text content */\r\n        content = currentNode.textContent;\r\n        content = stringReplace(content, MUSTACHE_EXPR$$1, ' ');\r\n        content = stringReplace(content, ERB_EXPR$$1, ' ');\r\n        if (currentNode.textContent !== content) {\r\n          arrayPush(DOMPurify.removed, { element: currentNode.cloneNode() });\r\n          currentNode.textContent = content;\r\n        }\r\n      }\r\n\r\n      /* Execute a hook if present */\r\n      _executeHook('afterSanitizeElements', currentNode, null);\r\n\r\n      return false;\r\n    };\r\n\r\n    /**\r\n     * _isValidAttribute\r\n     *\r\n     * @param  {string} lcTag Lowercase tag name of containing element.\r\n     * @param  {string} lcName Lowercase attribute name.\r\n     * @param  {string} value Attribute value.\r\n     * @return {Boolean} Returns true if `value` is valid, otherwise false.\r\n     */\r\n    // eslint-disable-next-line complexity\r\n    var _isValidAttribute = function _isValidAttribute(lcTag, lcName, value) {\r\n      /* Make sure attribute cannot clobber */\r\n      if (SANITIZE_DOM && (lcName === 'id' || lcName === 'name') && (value in document || value in formElement)) {\r\n        return false;\r\n      }\r\n\r\n      /* Allow valid data-* attributes: At least one character after \"-\"\r\n          (https://html.spec.whatwg.org/multipage/dom.html#embedding-custom-non-visible-data-with-the-data-*-attributes)\r\n          XML-compatible (https://html.spec.whatwg.org/multipage/infrastructure.html#xml-compatible and http://www.w3.org/TR/xml/#d0e804)\r\n          We don't need to check the value; it's always URI safe. */\r\n      if (ALLOW_DATA_ATTR && regExpTest(DATA_ATTR$$1, lcName)) ; else if (ALLOW_ARIA_ATTR && regExpTest(ARIA_ATTR$$1, lcName)) ; else if (!ALLOWED_ATTR[lcName] || FORBID_ATTR[lcName]) {\r\n        return false;\r\n\r\n        /* Check value is safe. First, is attr inert? If so, is safe */\r\n      } else if (URI_SAFE_ATTRIBUTES[lcName]) ; else if (regExpTest(IS_ALLOWED_URI$$1, stringReplace(value, ATTR_WHITESPACE$$1, ''))) ; else if ((lcName === 'src' || lcName === 'xlink:href' || lcName === 'href') && lcTag !== 'script' && stringIndexOf(value, 'data:') === 0 && DATA_URI_TAGS[lcTag]) ; else if (ALLOW_UNKNOWN_PROTOCOLS && !regExpTest(IS_SCRIPT_OR_DATA$$1, stringReplace(value, ATTR_WHITESPACE$$1, ''))) ; else if (!value) ; else {\r\n        return false;\r\n      }\r\n\r\n      return true;\r\n    };\r\n\r\n    /**\r\n     * _sanitizeAttributes\r\n     *\r\n     * @protect attributes\r\n     * @protect nodeName\r\n     * @protect removeAttribute\r\n     * @protect setAttribute\r\n     *\r\n     * @param  {Node} currentNode to sanitize\r\n     */\r\n    var _sanitizeAttributes = function _sanitizeAttributes(currentNode) {\r\n      var attr = void 0;\r\n      var value = void 0;\r\n      var lcName = void 0;\r\n      var l = void 0;\r\n      /* Execute a hook if present */\r\n      _executeHook('beforeSanitizeAttributes', currentNode, null);\r\n\r\n      var attributes = currentNode.attributes;\r\n\r\n      /* Check if we have attributes; if not we might have a text node */\r\n\r\n      if (!attributes) {\r\n        return;\r\n      }\r\n\r\n      var hookEvent = {\r\n        attrName: '',\r\n        attrValue: '',\r\n        keepAttr: true,\r\n        allowedAttributes: ALLOWED_ATTR\r\n      };\r\n      l = attributes.length;\r\n\r\n      /* Go backwards over all attributes; safely remove bad ones */\r\n      while (l--) {\r\n        attr = attributes[l];\r\n        var _attr = attr,\r\n            name = _attr.name,\r\n            namespaceURI = _attr.namespaceURI;\r\n\r\n        value = stringTrim(attr.value);\r\n        lcName = stringToLowerCase(name);\r\n\r\n        /* Execute a hook if present */\r\n        hookEvent.attrName = lcName;\r\n        hookEvent.attrValue = value;\r\n        hookEvent.keepAttr = true;\r\n        hookEvent.forceKeepAttr = undefined; // Allows developers to see this is a property they can set\r\n        _executeHook('uponSanitizeAttribute', currentNode, hookEvent);\r\n        value = hookEvent.attrValue;\r\n        /* Did the hooks approve of the attribute? */\r\n        if (hookEvent.forceKeepAttr) {\r\n          continue;\r\n        }\r\n\r\n        /* Remove attribute */\r\n        _removeAttribute(name, currentNode);\r\n\r\n        /* Did the hooks approve of the attribute? */\r\n        if (!hookEvent.keepAttr) {\r\n          continue;\r\n        }\r\n\r\n        /* Work around a security issue in jQuery 3.0 */\r\n        if (regExpTest(/\\/>/i, value)) {\r\n          _removeAttribute(name, currentNode);\r\n          continue;\r\n        }\r\n\r\n        /* Sanitize attribute content to be template-safe */\r\n        if (SAFE_FOR_TEMPLATES) {\r\n          value = stringReplace(value, MUSTACHE_EXPR$$1, ' ');\r\n          value = stringReplace(value, ERB_EXPR$$1, ' ');\r\n        }\r\n\r\n        /* Is `value` valid for this attribute? */\r\n        var lcTag = currentNode.nodeName.toLowerCase();\r\n        if (!_isValidAttribute(lcTag, lcName, value)) {\r\n          continue;\r\n        }\r\n\r\n        /* Handle invalid data-* attribute set by try-catching it */\r\n        try {\r\n          if (namespaceURI) {\r\n            currentNode.setAttributeNS(namespaceURI, name, value);\r\n          } else {\r\n            /* Fallback to setAttribute() for browser-unrecognized namespaces e.g. \"x-schema\". */\r\n            currentNode.setAttribute(name, value);\r\n          }\r\n\r\n          arrayPop(DOMPurify.removed);\r\n        } catch (_) {}\r\n      }\r\n\r\n      /* Execute a hook if present */\r\n      _executeHook('afterSanitizeAttributes', currentNode, null);\r\n    };\r\n\r\n    /**\r\n     * _sanitizeShadowDOM\r\n     *\r\n     * @param  {DocumentFragment} fragment to iterate over recursively\r\n     */\r\n    var _sanitizeShadowDOM = function _sanitizeShadowDOM(fragment) {\r\n      var shadowNode = void 0;\r\n      var shadowIterator = _createIterator(fragment);\r\n\r\n      /* Execute a hook if present */\r\n      _executeHook('beforeSanitizeShadowDOM', fragment, null);\r\n\r\n      while (shadowNode = shadowIterator.nextNode()) {\r\n        /* Execute a hook if present */\r\n        _executeHook('uponSanitizeShadowNode', shadowNode, null);\r\n\r\n        /* Sanitize tags and elements */\r\n        if (_sanitizeElements(shadowNode)) {\r\n          continue;\r\n        }\r\n\r\n        /* Deep shadow DOM detected */\r\n        if (shadowNode.content instanceof DocumentFragment) {\r\n          _sanitizeShadowDOM(shadowNode.content);\r\n        }\r\n\r\n        /* Check attributes, sanitize if necessary */\r\n        _sanitizeAttributes(shadowNode);\r\n      }\r\n\r\n      /* Execute a hook if present */\r\n      _executeHook('afterSanitizeShadowDOM', fragment, null);\r\n    };\r\n\r\n    /**\r\n     * Sanitize\r\n     * Public method providing core sanitation functionality\r\n     *\r\n     * @param {String|Node} dirty string or DOM node\r\n     * @param {Object} configuration object\r\n     */\r\n    // eslint-disable-next-line complexity\r\n    DOMPurify.sanitize = function (dirty, cfg) {\r\n      var body = void 0;\r\n      var importedNode = void 0;\r\n      var currentNode = void 0;\r\n      var oldNode = void 0;\r\n      var returnNode = void 0;\r\n      /* Make sure we have a string to sanitize.\r\n        DO NOT return early, as this will return the wrong type if\r\n        the user has requested a DOM object rather than a string */\r\n      if (!dirty) {\r\n        dirty = '<!-->';\r\n      }\r\n\r\n      /* Stringify, in case dirty is an object */\r\n      if (typeof dirty !== 'string' && !_isNode(dirty)) {\r\n        // eslint-disable-next-line no-negated-condition\r\n        if (typeof dirty.toString !== 'function') {\r\n          throw typeErrorCreate('toString is not a function');\r\n        } else {\r\n          dirty = dirty.toString();\r\n          if (typeof dirty !== 'string') {\r\n            throw typeErrorCreate('dirty is not a string, aborting');\r\n          }\r\n        }\r\n      }\r\n\r\n      /* Check we can run. Otherwise fall back or ignore */\r\n      if (!DOMPurify.isSupported) {\r\n        if (_typeof(window.toStaticHTML) === 'object' || typeof window.toStaticHTML === 'function') {\r\n          if (typeof dirty === 'string') {\r\n            return window.toStaticHTML(dirty);\r\n          }\r\n\r\n          if (_isNode(dirty)) {\r\n            return window.toStaticHTML(dirty.outerHTML);\r\n          }\r\n        }\r\n\r\n        return dirty;\r\n      }\r\n\r\n      /* Assign config vars */\r\n      if (!SET_CONFIG) {\r\n        _parseConfig(cfg);\r\n      }\r\n\r\n      /* Clean up removed elements */\r\n      DOMPurify.removed = [];\r\n\r\n      /* Check if dirty is correctly typed for IN_PLACE */\r\n      if (typeof dirty === 'string') {\r\n        IN_PLACE = false;\r\n      }\r\n\r\n      if (IN_PLACE) ; else if (dirty instanceof Node) {\r\n        /* If dirty is a DOM element, append to an empty document to avoid\r\n           elements being stripped by the parser */\r\n        body = _initDocument('<!---->');\r\n        importedNode = body.ownerDocument.importNode(dirty, true);\r\n        if (importedNode.nodeType === 1 && importedNode.nodeName === 'BODY') {\r\n          /* Node is already a body, use as is */\r\n          body = importedNode;\r\n        } else if (importedNode.nodeName === 'HTML') {\r\n          body = importedNode;\r\n        } else {\r\n          // eslint-disable-next-line unicorn/prefer-node-append\r\n          body.appendChild(importedNode);\r\n        }\r\n      } else {\r\n        /* Exit directly if we have nothing to do */\r\n        if (!RETURN_DOM && !SAFE_FOR_TEMPLATES && !WHOLE_DOCUMENT &&\r\n        // eslint-disable-next-line unicorn/prefer-includes\r\n        dirty.indexOf('<') === -1) {\r\n          return trustedTypesPolicy && RETURN_TRUSTED_TYPE ? trustedTypesPolicy.createHTML(dirty) : dirty;\r\n        }\r\n\r\n        /* Initialize the document to work on */\r\n        body = _initDocument(dirty);\r\n\r\n        /* Check we have a DOM node from the data */\r\n        if (!body) {\r\n          return RETURN_DOM ? null : emptyHTML;\r\n        }\r\n      }\r\n\r\n      /* Remove first element node (ours) if FORCE_BODY is set */\r\n      if (body && FORCE_BODY) {\r\n        _forceRemove(body.firstChild);\r\n      }\r\n\r\n      /* Get node iterator */\r\n      var nodeIterator = _createIterator(IN_PLACE ? dirty : body);\r\n\r\n      /* Now start iterating over the created document */\r\n      while (currentNode = nodeIterator.nextNode()) {\r\n        /* Fix IE's strange behavior with manipulated textNodes #89 */\r\n        if (currentNode.nodeType === 3 && currentNode === oldNode) {\r\n          continue;\r\n        }\r\n\r\n        /* Sanitize tags and elements */\r\n        if (_sanitizeElements(currentNode)) {\r\n          continue;\r\n        }\r\n\r\n        /* Shadow DOM detected, sanitize it */\r\n        if (currentNode.content instanceof DocumentFragment) {\r\n          _sanitizeShadowDOM(currentNode.content);\r\n        }\r\n\r\n        /* Check attributes, sanitize if necessary */\r\n        _sanitizeAttributes(currentNode);\r\n\r\n        oldNode = currentNode;\r\n      }\r\n\r\n      oldNode = null;\r\n\r\n      /* If we sanitized `dirty` in-place, return it. */\r\n      if (IN_PLACE) {\r\n        return dirty;\r\n      }\r\n\r\n      /* Return sanitized string or DOM */\r\n      if (RETURN_DOM) {\r\n        if (RETURN_DOM_FRAGMENT) {\r\n          returnNode = createDocumentFragment.call(body.ownerDocument);\r\n\r\n          while (body.firstChild) {\r\n            // eslint-disable-next-line unicorn/prefer-node-append\r\n            returnNode.appendChild(body.firstChild);\r\n          }\r\n        } else {\r\n          returnNode = body;\r\n        }\r\n\r\n        if (RETURN_DOM_IMPORT) {\r\n          /*\r\n            AdoptNode() is not used because internal state is not reset\r\n            (e.g. the past names map of a HTMLFormElement), this is safe\r\n            in theory but we would rather not risk another attack vector.\r\n            The state that is cloned by importNode() is explicitly defined\r\n            by the specs.\r\n          */\r\n          returnNode = importNode.call(originalDocument, returnNode, true);\r\n        }\r\n\r\n        return returnNode;\r\n      }\r\n\r\n      var serializedHTML = WHOLE_DOCUMENT ? body.outerHTML : body.innerHTML;\r\n\r\n      /* Sanitize final string template-safe */\r\n      if (SAFE_FOR_TEMPLATES) {\r\n        serializedHTML = stringReplace(serializedHTML, MUSTACHE_EXPR$$1, ' ');\r\n        serializedHTML = stringReplace(serializedHTML, ERB_EXPR$$1, ' ');\r\n      }\r\n\r\n      return trustedTypesPolicy && RETURN_TRUSTED_TYPE ? trustedTypesPolicy.createHTML(serializedHTML) : serializedHTML;\r\n    };\r\n\r\n    /**\r\n     * Public method to set the configuration once\r\n     * setConfig\r\n     *\r\n     * @param {Object} cfg configuration object\r\n     */\r\n    DOMPurify.setConfig = function (cfg) {\r\n      _parseConfig(cfg);\r\n      SET_CONFIG = true;\r\n    };\r\n\r\n    /**\r\n     * Public method to remove the configuration\r\n     * clearConfig\r\n     *\r\n     */\r\n    DOMPurify.clearConfig = function () {\r\n      CONFIG = null;\r\n      SET_CONFIG = false;\r\n    };\r\n\r\n    /**\r\n     * Public method to check if an attribute value is valid.\r\n     * Uses last set config, if any. Otherwise, uses config defaults.\r\n     * isValidAttribute\r\n     *\r\n     * @param  {string} tag Tag name of containing element.\r\n     * @param  {string} attr Attribute name.\r\n     * @param  {string} value Attribute value.\r\n     * @return {Boolean} Returns true if `value` is valid. Otherwise, returns false.\r\n     */\r\n    DOMPurify.isValidAttribute = function (tag, attr, value) {\r\n      /* Initialize shared config vars if necessary. */\r\n      if (!CONFIG) {\r\n        _parseConfig({});\r\n      }\r\n\r\n      var lcTag = stringToLowerCase(tag);\r\n      var lcName = stringToLowerCase(attr);\r\n      return _isValidAttribute(lcTag, lcName, value);\r\n    };\r\n\r\n    /**\r\n     * AddHook\r\n     * Public method to add DOMPurify hooks\r\n     *\r\n     * @param {String} entryPoint entry point for the hook to add\r\n     * @param {Function} hookFunction function to execute\r\n     */\r\n    DOMPurify.addHook = function (entryPoint, hookFunction) {\r\n      if (typeof hookFunction !== 'function') {\r\n        return;\r\n      }\r\n\r\n      hooks[entryPoint] = hooks[entryPoint] || [];\r\n      arrayPush(hooks[entryPoint], hookFunction);\r\n    };\r\n\r\n    /**\r\n     * RemoveHook\r\n     * Public method to remove a DOMPurify hook at a given entryPoint\r\n     * (pops it from the stack of hooks if more are present)\r\n     *\r\n     * @param {String} entryPoint entry point for the hook to remove\r\n     */\r\n    DOMPurify.removeHook = function (entryPoint) {\r\n      if (hooks[entryPoint]) {\r\n        arrayPop(hooks[entryPoint]);\r\n      }\r\n    };\r\n\r\n    /**\r\n     * RemoveHooks\r\n     * Public method to remove all DOMPurify hooks at a given entryPoint\r\n     *\r\n     * @param  {String} entryPoint entry point for the hooks to remove\r\n     */\r\n    DOMPurify.removeHooks = function (entryPoint) {\r\n      if (hooks[entryPoint]) {\r\n        hooks[entryPoint] = [];\r\n      }\r\n    };\r\n\r\n    /**\r\n     * RemoveAllHooks\r\n     * Public method to remove all DOMPurify hooks\r\n     *\r\n     */\r\n    DOMPurify.removeAllHooks = function () {\r\n      hooks = {};\r\n    };\r\n\r\n    return DOMPurify;\r\n  }\r\n\r\n  var purify = createDOMPurify();\r\n\r\n  return purify;\r\n\r\n}));\r\n//# sourceMappingURL=purify.js.map\r\n"],"sourceRoot":"webpack:///","file":"dompurify-es5.js"}